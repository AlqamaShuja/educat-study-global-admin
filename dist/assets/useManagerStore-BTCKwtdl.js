import{d as o,c as f,y as p}from"./index-B8d-T4_g.js";import{c as h,t as m,m as y}from"./toDate-BKXxHYqX.js";function w(e,s,a){return h(e,+m(e)+s)}function u(e,s,a){return w(e,s*y)}const l={async createLead(e){return await o.post("/manager/leads",e)},async getDashboard(){return await o.get("/manager/dashboard")},async getStaffSchedules(){return await o.get("/manager/staff/schedules")},async getConsultantInteractions(e){return await o.get(`/manager/staff/${e}/interactions`)},async getConsultationNotes(e){return await o.get(`/manager/staff/${e}/notes`)},async reassignLead(e,s){return await o.put(`/manager/leads/${e}/reassign`,{consultantId:s})},async getStaffReports(){return await o.get("/manager/staff/reports")},async createStaffMember(e){return await o.post("/manager/staff",e)},async updateStaffMember(e,s){return await o.put(`/manager/staff/${e}`,s)},async disconnectStaffMember(e){return await o.delete(`/manager/staff/${e}`)},async getOfficeLeads(){return await o.get("/manager/leads")},async assignLead(e,s){return await o.put(`/manager/leads/${e}/assign`,{consultantId:s})},updateLead:async(e,s)=>(await axios.put(`/manager/leads/${e}`,s)).data,async setLeadReminder(e,s){return await o.post(`/manager/leads/${e}/reminders`,s)},async addLeadNotes(e,s){return await o.put(`/manager/leads/${e}/notes`,s)},async getLeadProgress(e){return await o.get(`/manager/leads/${e}/progress`)},async getOfficeConsultants(){return(await o.get("/manager/consultants")).data},async getStudentProfile(e){return await o.get(`/consultant/students/${e}/profile`)},async getLeadTasks(e){return await o.get(`/consultant/leads/${e}/tasks`)},async getLeadDocuments(e){return await o.get(`/consultant/leads/${e}/documents`)},async sendMessage(e,s){return await o.post(`/consultant/students/${e}/messages`,{message:s})},async createTask(e,s){return await o.post(`/consultant/leads/${e}/tasks`,s)},async uploadLeadDocument(e,s,a,t){const r=new FormData;return s.forEach(c=>{r.append("files",c)}),r.append("types",JSON.stringify(a)),r.append("notes",JSON.stringify(t)),await o.post(`/consultant/leads/${e}/documents`,r)},getSchedules:async()=>o.get("/manager/staff/schedules"),createSchedule:async e=>{const s={...e,type:e.type==="shift"?"virtual":"in_person",status:e.status==="cancelled"?"canceled":e.status,endTime:e.endTime||u(new Date(e.startTime),1).toISOString()};return o.post("/manager/staff/schedules",s)},updateSchedule:async(e,s)=>{const a={...s,type:s.type==="shift"?"virtual":"in_person",status:s.status==="cancelled"?"canceled":s.status,endTime:s.endTime||u(new Date(s.startTime),1).toISOString()};return o.put(`/manager/staff/schedules/${e}`,a)},deleteSchedule:async e=>o.delete(`/manager/staff/schedules/${e}`),getStudents:async()=>o.get("/manager/students"),getReceptionist:async()=>(await o.get("/manager/receptionists")).data},L=f((e,s)=>({leads:[],studentProfile:null,tasks:[],documents:[],dashboard:null,consultants:[],receptionists:[],loading:!1,error:null,schedules:[],fetchLeads:async()=>{var a,t;e({loading:!0,error:null});try{const r=await l.getOfficeLeads();console.log("Fetched leads:",r),e({leads:r||[],loading:!1})}catch(r){console.error("Fetch leads error:",r),p.error(r||r.message||"Failed to fetch Leads"),e({error:((t=(a=r.response)==null?void 0:a.data)==null?void 0:t.error)||"Failed to fetch leads",loading:!1})}},fetchStudentProfile:async a=>{var t,r;e({loading:!0,error:null});try{const n=await l.getStudentProfile(a);return console.log("Fetched student profile:",n),e({studentProfile:n,loading:!1}),n}catch(n){throw console.error("Fetch student profile error:",n),e({error:((r=(t=n.response)==null?void 0:t.data)==null?void 0:r.error)||"Failed to fetch profile",loading:!1}),n}},fetchLeadTasks:async a=>{var t,r;e({loading:!0,error:null});try{const n=await l.getLeadTasks(a);console.log("Fetched lead tasks:",n),e({tasks:n||[],loading:!1})}catch(n){console.error("Fetch lead tasks error:",n),e({error:((r=(t=n.response)==null?void 0:t.data)==null?void 0:r.error)||"Failed to fetch tasks",loading:!1})}},fetchLeadDocuments:async a=>{var t,r;e({loading:!0,error:null});try{const n=await l.getLeadDocuments(a);console.log("Fetched lead documents:",n),e({documents:n||[],loading:!1})}catch(n){console.error("Fetch lead documents error:",n),e({error:((r=(t=n.response)==null?void 0:t.data)==null?void 0:r.error)||"Failed to fetch documents",loading:!1})}},sendMessage:async(a,t)=>{var r,n;e({loading:!0,error:null});try{const c=await l.sendMessage(a,t);return console.log("Message sent:",c),e({loading:!1}),c}catch(c){throw console.error("Send message error:",c),e({error:((n=(r=c.response)==null?void 0:r.data)==null?void 0:n.error)||"Failed to send message",loading:!1}),c}},createTask:async(a,t)=>{var r,n;e({loading:!0,error:null});try{const c=await l.createTask(a,t);return console.log("Task created:",c),e(i=>({tasks:[...i.tasks,c],loading:!1})),c}catch(c){throw console.error("Create task error:",c),e({error:((n=(r=c.response)==null?void 0:r.data)==null?void 0:n.error)||"Failed to create task",loading:!1}),c}},uploadDocument:async(a,t,r,n)=>{var c,i;e({loading:!0,error:null});try{const d=await l.uploadLeadDocument(a,t,r,n);return console.log("Document uploaded:",d),e(g=>({documents:[...g.documents,d],loading:!1})),d}catch(d){throw console.error("Upload document error:",d),e({error:((i=(c=d.response)==null?void 0:c.data)==null?void 0:i.error)||"Failed to upload document",loading:!1}),d}},fetchDashboard:async()=>{var a,t;e({loading:!0,error:null});try{const r=await l.getDashboard();console.log("Fetched dashboard:",r),e({dashboard:r,loading:!1})}catch(r){console.error("Fetch dashboard error:",r),e({error:((t=(a=r.response)==null?void 0:a.data)==null?void 0:t.error)||"Failed to fetch dashboard",loading:!1})}},fetchOfficeConsultants:async()=>{var a,t;e({loading:!0,error:null});try{const r=await l.getOfficeConsultants();console.log("Fetched consultants:",r),e({consultants:r||[],loading:!1})}catch(r){console.error("Fetch consultants error:",r),e({error:((t=(a=r.response)==null?void 0:a.data)==null?void 0:t.error)||"Failed to fetch consultants",loading:!1})}},fetchOfficeReceptionist:async()=>{var a,t;e({loading:!0,error:null});try{const r=await l.getReceptionist();return console.log("Fetched consultants:",r),e({receptionists:r||[],loading:!1}),r}catch(r){console.error("Fetch consultants error:",r),e({error:((t=(a=r.response)==null?void 0:a.data)==null?void 0:t.error)||"Failed to fetch consultants",loading:!1})}},reassignLead:async(a,t)=>{var r,n;e({loading:!0,error:null});try{const c=await l.reassignLead(a,t);return console.log("Lead reassigned:",c.data),e(i=>({leads:i.leads.map(d=>d.id===a?c:d),loading:!1})),c}catch(c){throw console.error("Reassign lead error:",c),e({error:((n=(r=c.response)==null?void 0:r.data)==null?void 0:n.error)||"Failed to reassign lead",loading:!1}),c}},fetchSchedules:async()=>{var a,t;e({loading:!0});try{const r=await l.getSchedules();e({schedules:r||[],loading:!1})}catch(r){e({error:((t=(a=r.response)==null?void 0:a.data)==null?void 0:t.message)||"Failed to fetch schedules",loading:!1})}},setSchedules:a=>e({schedules:a}),setReceptionists:a=>e({receptionists:a})}));export{u as a,l as m,L as u};
